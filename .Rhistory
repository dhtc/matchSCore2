load(file="data/markers_quartzseq2.RData")
gene_cl.qs <- cut_markers(levels(markers$cluster),markers = markers,ntop=100)
str(gene_cl.qs)
mod <- train_model(scale.data = logcounts_qs2,clus = clus.qs,gene_cl.ref = gene_cl.qs,prop = 0.75)
length(clus.qs)
dim(logcounts_qs2)
class(logcounts_qs2)
clus = clus.qs
gene_cl.ref = gene_cl
gene_cl.ref = gene_cl.qs
prop = 0.75
scale.data = logcounts_qs2
sizes <- unlist(lapply(levels(clus),function(x) length(clus[which(clus %in% x)])))
names(sizes) <- levels(clus)
if(is.null(prop)){prop <- 0.5}
train.sample <- unlist(sapply(levels(clus),function(x) sample(x = which(clus %in% x),size = sizes[names(sizes)==x]*prop)))
s <- colnames(scale.data)[train.sample]
test.sample <- which(!colnames(scale.data) %in% s)
train.data <- scale.data[,train.sample]
test.data <- scale.data[,test.sample]
out.train <- clus[train.sample]
out.test <- clus[test.sample]
var.train <- sapply(gene_cl.ref,function(x) Matrix::colSums(train.data[x,]))
#p <- which(unlist(gene_cl.qs) %in% )
which(!unique(markers$gene) %in% row.names(logcounts_qs2))
unique(markers$gene)[which(!unique(markers$gene) %in% row.names(logcounts_qs2))]
markers$gene[which(!markers$gene %in% row.names(logcounts_qs2))]
to_rm <- which(!markers$gene %in% row.names(logcounts_qs2))
markers <- markers[to_rm,]
save(markers,file="data/markers_quartzseq2.RData")
library(scater)
library(scater)
load(file="sce.all_classified.technologies.RData") ## load the data
load(file="~/Dropbox/HCA_benchmarking_sample/Revision/Integration/All_reads/sce.all_classified.technologies.RData")
colData(sce) ### give access to the metadata DataFrame
table(colData(sce)$nnet2) ## Number of cells from each classified cell type (by matchSCore2 classification)
table(colData(sce)$ident) ## Number of cells from each Seurat cluster
table(colData(sce)$batch) ## Number of cells from each protocol
quartzseq2 <- sce[, sce$batch=="Quartz-Seq2"]
logcounts_qs2 <- quartzseq2@assays$data@listData$logcounts ## Quartz-Seq2 logcounts
clus.qs <- factor(quartzseq2@colData$nnet2)
names(clus.qs) <- colnames(logcounts_qs2)
table(clus.qs)
p <- grep("Megakaryocytes",clus.qs)
clus.qs <- factor(clus.qs[-p])
logcounts_qs2 <- logcounts_qs2[,-p]
dropseq <- sce[, sce$batch=="Drop-Seq"]
logcounts_ds <- dropseq@assays$data@listData$logcounts ## Drop-Seq logcounts
library("matchSCore2")
library("nnet")
load(file="data/markers_quartzseq2.RData")
gene_cl.qs <- cut_markers(levels(markers$cluster),markers = markers,ntop=100)
str(gene_cl.qs)
load(file="data/markers_quartzseq2.RData")
p <- which(markers$gene %in% rownames(logcounts_qs2))
markers <- markers[p,]
save(markers,file="data/markers_quartzseq2.RData")
load(file="data/markers_quartzseq2.RData")
gene_cl.qs <- cut_markers(levels(markers$cluster),markers = markers,ntop=100)
str(gene_cl.qs)
mod <- train_model(scale.data = logcounts_qs2,clus = clus.qs,gene_cl.ref = gene_cl.qs,prop = 0.75)
out <- identity_map(scale.data = logcounts_ds,model = mod,gene_cl.ref = gene_cl.qs)
out <- identity_map(scale.data = logcounts_ds,model = mod,gene_cl.ref = gene_cl.qs)
ids <- out$ids
probabilities <- out$fit.prob
head(probabilities)
table(ids)
clus.ds <- factor(dropseq@colData$nnet2)
clus.ds <- factor(dropseq@colData$ident)
clus.ds <- factor(dropseq@colData$ident)
table(clus.ds,ids)
mod <- train_model(scale.data = logcounts_qs2,clus = clus.qs,gene_cl.ref = gene_cl.qs,prop = 0.9)
out <- identity_map(scale.data = logcounts_ds,model = mod,gene_cl.ref = gene_cl.qs)
ids <- out$ids
table(ids)
probabilities <- out$fit.prob
head(probabilities)
clus.ds <- factor(dropseq@colData$ident)
table(clus.ds,ids)
load(file="~/Dropbox/HCA_benchmarking_sample/Revision/Integration/All_reads/sce.all_classified.technologies.RData")
quartzseq2 <- sce[, sce$batch=="Quartz-Seq2"]
logcounts_qs2 <- quartzseq2@assays$data@listData$logcounts ## Quartz-Seq2 logcounts
clus.qs <- factor(quartzseq2@colData$nnet2)
names(clus.qs) <- colnames(logcounts_qs2)
table(clus.qs)
p <- grep("Megakaryocytes",clus.qs)
clus.qs <- factor(clus.qs[-p])
logcounts_qs2 <- logcounts_qs2[,-p]
library(Seurat)
counts <- quartzseq2@assays$data@listData$counts
counts <- counts[,-p]
data <- CreateSeuratObject(counts = counts,min.cells = 0,min.features = 0)
data@assays$RNA@data <- logcounts_qs2
data@active.ident <- clus.qs
markers <- FindAllMarkers(data,only.pos = T)
gene_cl.qs <- cut_markers(levels(markers$cluster),markers = markers,ntop=100)
str(gene_cl.qs)
mod <- train_model(scale.data = logcounts_qs2,clus = clus.qs,gene_cl.ref = gene_cl.qs,prop = 0.9)
out <- identity_map(scale.data = logcounts_ds,model = mod,gene_cl.ref = gene_cl.qs)
ids <- out$ids
table(ids)
probabilities <- out$fit.prob
head(probabilities)
head(round(probabilities,digits = 2))
head(round(probabilities*100,digits = 2))
clus.ds <- factor(dropseq@colData$ident)
table(clus.ds,ids)
marsseq <- sce[, sce$batch=="MARS-Seq"]
logcounts_ms <- marsseq@assays$data@listData$logcounts ## Drop-Seq logcounts
clus.ds <- factor(dropseq@colData$nnet2)
table(clus.ds,ids)
clus.ds <- factor(marsseq@colData$nnet2)
clus.ms <- factor(marsseq@colData$nnet2)
marsseq <- sce[, sce$batch=="MARS-Seq"]
logcounts_ms <- marsseq@assays$data@listData$logcounts ## Drop-Seq logcounts
out <- identity_map(scale.data = logcounts_ms,model = mod,gene_cl.ref = gene_cl.qs)
ids <- out$ids
table(ids)
probabilities <- out$fit.prob
head(round(probabilities*100,digits = 2))
clus.ms <- factor(marsseq@colData$nnet2)
table(clus.ms,ids)
chromium <- sce[, sce$batch=="Chromium"]
chromium <- sce[, sce$batch=="Chromium"]
logcounts_chromium <- chromium@assays$data@listData$logcounts ## chromium logcounts
chromium <- sce[, sce$batch=="Chromium"]
logcounts_chromium <- chromium@assays$data@listData$logcounts ## chromium logcounts
clus.chromium <- factor(chromium@colData$nnet2)
names(clus.chromium) <- colnames(logcounts_chromium)
table(clus.chromium)
marsseq <- sce[, sce$batch=="MARS-Seq"]
logcounts_ms <- marsseq@assays$data@listData$logcounts ## MARS-seq logcounts
load(file="data/gene_cl.ref_Chromium.RData")
mod <- train_model(scale.data = logcounts_chromium,clus = clus.chromium,gene_cl.ref = gene_cl.ref,prop = 0.9)
str(gene_cl.ref)
table(clus.chromium)
#gene_cl_chromium <- lapply(gene_cl)
gene_cl
mod <- train_model(scale.data = logcounts_chromium,clus = clus.chromium,gene_cl.ref = gene_cl,prop = 0.9)
save(markers,file="data/markers_quartzseq2.RData")
load(file="~/Dropbox/HCA_benchmarking_sample/Revision/Integration/All_reads/sce.all_classified.technologies.RData")
chromium <- sce[, sce$batch=="Chromium"]
logcounts_chromium <- chromium@assays$data@listData$logcounts ## chromium logcounts
clus.chromium <- factor(chromium@colData$nnet2)
names(clus.chromium) <- colnames(logcounts_chromium)
table(clus.chromium)
marsseq <- sce[, sce$batch=="MARS-Seq"]
logcounts_ms <- marsseq@assays$data@listData$logcounts ## MARS-seq logcounts
library("matchSCore2")
library("nnet")
load(file="data/gene_cl.ref_Chromium.RData")
mod <- train_model(scale.data = logcounts_chromium,clus = clus.chromium,gene_cl.ref = gene_cl,prop = 0.9)
mod <- train_model(scale.data = logcounts_chromium,clus = clus.chromium,gene_cl.ref = gene_cl.ref,prop = 0.9)
gene_cl.ref <- lapply(gene_cl.ref,function(x) x[which(x %in% rownames(logcounts_chromium))])
mod <- train_model(scale.data = logcounts_chromium,clus = clus.chromium,gene_cl.ref = gene_cl.ref,prop = 0.9)
#gene_cl.ref <- lapply(gene_cl.ref,function(x) x[which(x %in% rownames(logcounts_chromium))])
gene_cl.chromium <- gene_cl.ref
save(gene_cl.chromium,file="data/gene_cl.ref_Chromium.RData")
mod <- train_model(scale.data = logcounts_chromium,clus = clus.chromium,gene_cl.ref = gene_cl.chromium,prop = 0.9)
out <- identity_map(scale.data = logcounts_ms,model = mod,gene_cl.ref = gene_cl.chromium)
ids <- out$ids
table(ids)
probabilities <- out$fit.prob
head(round(probabilities*100,digits = 2))
clus.ms <- factor(marsseq@colData$nnet2)
table(clus.ms,ids)
clus.ms <- factor(marsseq@colData$ident)
table(clus.ms,ids)
?matchSCore
summary_barplot(class.fac = clus.ms,obs.fac = ids)
col=c("aquamarine","orange","green4","blueviolet","black","maroon","coral2","deepskyblue3","red","gold")
summary_barplot(class.fac = clus.ms,obs.fac = ids)+scale_color_manual(values = col)
summary_barplot(class.fac = clus.ms,obs.fac = ids)+scale_fill_manual(values = col)
summary_barplot(class.fac = ids ,obs.fac = clus.ms)+scale_fill_manual(values = col)
load(file="~/Dropbox/HCA_benchmarking_sample/col_PBMC_human.RData")
col
col=c("blueviolet","aquamarine","green4","maroon","orange","black","red","coral2","lightgray")
summary_barplot(class.fac = ids ,obs.fac = clus.ms)+scale_fill_manual(values = col)
col=c("aquamarine","orange","green4","blueviolet","black","maroon","coral2","deepskyblue3","red","gold")
summary_barplot(class.fac = ids ,obs.fac = clus.ms)+scale_fill_manual(values = col)
original_annotation <- factor(marsseq@colData$nnet2)
summary_barplot(class.fac = ids ,obs.fac = original_annotation)+scale_fill_manual(values = col)
summary_barplot(class.fac = ids ,obs.fac = clus.ms)+scale_fill_manual(values = col)
col=c("aquamarine","orange","green4","blueviolet","black","maroon","coral2","deepskyblue3","lightgray")
summary_barplot(class.fac = ids ,obs.fac = clus.ms)+scale_fill_manual(values = col)
load(file="data/gene_cl.ref_Chromium.RData")
load(file="data/gene_cl_MARS-Seq.RData")
ms <- matchSCore2(gene_cl.ref = gene_cl.ref.chromium,gene_cl.obs = gene_cl,ylab = "Chromium",xlab = "MARS-Seq")
ms$ggplot
load(file="data/gene_cl_MARS-Seq.RData")
ms <- matchSCore2(gene_cl.ref = gene_cl.chromium,gene_cl.obs = gene_cl,ylab = "Chromium",xlab = "MARS-Seq")
ms$ggplot
ms <- matchSCore2(gene_cl.ref = gene_cl.chromium,gene_cl.obs = gene_cl,ylab = "Chromium",xlab = "MARS-Seq")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocStyle")
library(BiocStyle)
load(file="~/Dropbox/HCA_benchmarking_sample/Revision/Integration/All_reads/sce.all_classified.technologies.RData")
load(file="~/Dropbox/HCA_benchmarking_sample/Revision/Integration/All_reads/data.list_seurat.obj_all_datasets.RData")
ref <- data.list$`Smart-Seq2`
ref <- data.list$`Smart-Seq2`
marsseq <- data.list$`MARS-Seq`
ref.clus <- ref$nnet2
table(ref.clus)
load(file="~/Dropbox/HCA_benchmarking_sample/Revision/Integration/All_reads/data.list_seurat.obj_all_datasets.RData")
ref <- data.list$`Smart-Seq2`
ref.clus <- ref$nnet2
marsseq <- data.list$`MARS-Seq`
ref <- data.list$Chromium
ref.clus <- ref$nnet2
table(ref.clus)
load(file="~/Dropbox/HCA_benchmarking_sample/Revision/Integration/All_reads/Benchmarking_data/gene_cl_all_datasets.RData")
load(file="gene_cl_all_datasets.RData")
load(file="~/Dropbox/HCA_benchmarking_sample/Revision/Integration/All_reads/Benchmarking_data/gene_cl_all_datasets.RData")
gene_cl$Chromium
marsseq <- data.list$`MARS-Seq`
library("matchSCore2")
library("nnet")
str(gene_cl.ref)
gene_cl.ref <- gene_cl$Chromium
str(gene_cl.ref)
seurat.clusters <- ref@active.ident
nnet2 <- ref$nnet2
p <- which(nnet2=="Unclassified")
length(p)
table(nnet2)
p <- which(nnet2=="unclassified")
length(p)
table(seurat.clusters[p])
seurat.clusters <- ref$res.0.7
head(seurat.clusters)
head(ref@meta.data)
seurat.clusters <- ref@active.ident
p <- which(nnet2=="unclassified")
table(seurat.clusters[p])
table(seurat.clusters,nnet2)
length(seurat.clusters)
length(nnet2)
marsseq <- data.list$`MARS-Seq`
table(marsseq@active.ident)
load(file="gene_cl_all_datasets.RData")
gene_cl.ref <- gene_cl$Chromium
str(gene_cl.ref)
marsseq <- data.list$`MARS-Seq`
load(file="~/Dropbox/HCA_benchmarking_sample/Revision/Integration/All_reads/Benchmarking_data/markers_all_datasets.RData")
ref.markers <- markers$Chromium
gene_cl.ref <- cut_markers(levels(ref.markers$cluster),markers = ref.markers,ntop = 100)
gene_cl.ref
str(gene_cl.ref)
scaled <- ref@assays$RNA@scale.data
### Training of the model
mod <- train_model(scale.data = ,clus = nnet2,gene_cl.ref = gene_cl.ref,prop = 0.5)
### Training of the model
mod <- train_model(scale.data = scaled,clus = nnet2,gene_cl.ref = gene_cl.ref,prop = 0.5)
scaled <- ScaleData(marsseq,features = unlist(gene_cl.ref))
scaled <- scaled@assays$RNA@scale.data
## Cell projection
out <- identity_map(scale.data = scaled,model = mod,gene_cl.ref = gene_cl.ref)
### cell identities
ids <- out$ids
table(ids)
## To each cell probabilities are assigned for any possible identity class
probabilities <- out$fit.prob
head(round(probabilities*100,digits = 2))
or_mseq.annotation <- marsseq$nnet2
table(clus.ms,ids)
mseq.annotation <- marsseq$nnet2
table(mseq.annotation,ids)
col=c("aquamarine","orange","green4","blueviolet","black","maroon","coral2","deepskyblue3","lightgray")
summary_barplot(class.fac = ids ,obs.fac = clus.ms)+scale_fill_manual(values = col)
summary_barplot(class.fac = ids ,obs.fac = mseq.annotation)+scale_fill_manual(values = col)
install.packages("HelpersMG")
library(HelpersMG)
wget("https://www.dropbox.com/sh/wgu6kcioqkkva4g/AABHJaFsiqYZeYc-xv6qtg3ba?dl=0/sce.all_classified.technologies.RData")
sce
sce <- wget("https://www.dropbox.com/sh/wgu6kcioqkkva4g/AABHJaFsiqYZeYc-xv6qtg3ba?dl=0/sce.all_classified.technologies.RData")
sce
sce <- wget("https://www.dropbox.com/s/lrfoux7uxundcy1/sce.all_classified.technologies.RData?dl=0")
sce
?wget
wget("https://www.dropbox.com/s/lrfoux7uxundcy1/sce.all_classified.technologies.RData?dl=0")
sce
wget("https://www.dropbox.com/s/lrfoux7uxundcy1/sce.all_classified.technologies.RData?dl=0")
sce
rm(sce)
load(file=wget("https://www.dropbox.com/s/lrfoux7uxundcy1/sce.all_classified.technologies.RData?dl=0"))
load(file=wget("https://www.dropbox.com/s/lrfoux7uxundcy1/sce.all_classified.technologies.RData?dl=1"))
load(file=download.file("https://www.dropbox.com/s/lrfoux7uxundcy1/sce.all_classified.technologies.RData?dl=1"))
load(file=wget(url = "https://www.dropbox.com/s/lrfoux7uxundcy1/sce.all_classified.technologies.RData?dl=1"))
wget(url = "https://www.dropbox.com/s/lrfoux7uxundcy1/sce.all_classified.technologies.RData?dl=1")
sce
wget(url = "https://www.dropbox.com/s/lrfoux7uxundcy1/sce.all_classified.technologies.RData?dl=1")
wget(url = "https://www.dropbox.com/s/lrfoux7uxundcy1/sce.all_classified.technologies.RData?dl=0")
wget(url = "https://www.dropbox.com/s/lrfoux7uxundcy1/sce.all_classified.technologies.RData")
load(file=wget(url = "https://www.dropbox.com/s/lrfoux7uxundcy1/sce.all_classified.technologies.RData"))
load(file="sce.all_classified.technologies.RData") ## load the data
pwd
getwd
getwd()
#load(file="setClass("", slots = c(name = "type"))")
load(file="sce.all_classified.technologies.RData")
url <- "https://www.dropbox.com/s/lrfoux7uxundcy1/sce.all_classified.technologies.RData?dl=0"
url <- "https://www.dropbox.com/s/lrfoux7uxundcy1/sce.all_classified.technologies.RData?dl=0"
url <- "https://www.dropbox.com/s/lrfoux7uxundcy1/sce.all_classified.technologies.RData?dl=0"
download.file(url = url,destfile = "~/Downloads/sce.all_classified.technologies.RData",mode = "wb")
load(file="~/Downloads/sce.all_classified.technologies.RData") ## load the data
url <- "https://www.dropbox.com/s/lrfoux7uxundcy1/sce.all_classified.technologies.RData?raw=true"
download.file(url = url,destfile = "~/Downloads/sce.all_classified.technologies.RData",mode = "wb")
load(file="~/Downloads/sce.all_classified.technologies.RData") ## load the data
sce
load(file="~/Downloads/data.list_seurat.obj_all_datasets.RData")
load(file="~/Downloads/data.list_seurat.obj_all_datasets.RData")
ref <- data.list$Chromium
nnet2 <- ref$nnet2
marsseq <- data.list$`MARS-Seq`
library("matchSCore2")
library("nnet")
load(file="~/Downloads/markers_all_datasets.RData")
ref.markers <- markers$Chromium
gene_cl.ref <- cut_markers(levels(ref.markers$cluster),markers = ref.markers,ntop = 100)
str(gene_cl.ref)
scaled <- ref@assays$RNA@scale.data
### Training of the model
mod <- train_model(scale.data = scaled,clus = nnet2,gene_cl.ref = gene_cl.ref,prop = 0.5)
ref <- data.list$Chromium
nnet2 <- ref$nnet2
marsseq <- data.list$`MARS-Seq`
ref.markers <- markers$Chromium
gene_cl.ref <- cut_markers(levels(ref.markers$cluster),markers = ref.markers,ntop = 100)
str(gene_cl.ref)
scaled <- ref@assays$RNA@scale.data
mod <- train_model(scale.data = scaled,clus = nnet2,gene_cl.ref = gene_cl.ref,prop = 0.5)
library(circlize)
library(plyr)
scaled <- ScaleData(marsseq,features = unlist(gene_cl.ref))
scaled <- scaled@assays$RNA@scale.data
## Cell projection
out <- identity_map(scale.data = scaled,
model = mod,
gene_cl.ref = gene_cl.ref)
### cell identities
ids <- out$ids
## To each cell probabilities are assigned for any possible identity class
probabilities <- out$fit.prob
head(probabilities)
class(probabilities)
my.data <- data.frame(t(probabilities),check.names = F,check.rows = F)
my_df.melt <-  melt(cbind(x=1:nrow(my_df),my_df),id ="x")
my.df <- data.frame(t(probabilities),check.names = F,check.rows = F)
my_df.melt <-  melt(cbind(x=1:nrow(my_df),my_df),id ="x")
my_df <- data.frame(t(probabilities),check.names = F,check.rows = F)
my_df.melt <-  melt(cbind(x=1:nrow(my_df),my_df),id ="x")
head(my_df.melt)
my_df <- data.frame(probabilities,check.names = F,check.rows = F)
my_df.melt <-  melt(cbind(x=1:nrow(my_df),my_df),id ="x")
head(my_df.melt)
gg <- ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x=xlab,y=ylab)+
geom_tile(aes(fill = value)) + scale_x_discrete(lab=rownames(my_df))+
theme(axis.text.x=element_text(angle=30,hjust = 1,size=16),axis.text.y = element_text(size=16),axis.title = element_text(size=16))+
geom_text(aes(label = round(value, 2))) +
scale_fill_gradient(low = "white", high = "red",name="Jaccard Index \n")
gg
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value))
head(probabilities)
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="x",y="y")+
geom_tile(aes(fill = value))
gg <- ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="x",y="y")+
geom_tile(aes(fill = value)) + scale_x_discrete(lab=rownames(my_df))
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="x",y="y")+
geom_tile(aes(fill = value)) + scale_x_discrete(lab=rownames(my_df))
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="x",y="y")+
geom_tile(aes(fill = value)) + scale_fill_gradient(low = "white", high = "blue",name="Probability\n")
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="Cells",y="Cell identities")+
geom_tile(aes(fill = value)) + scale_fill_gradientn(colours = c("black","blue","yellow","magenta"),name="Probability\n")
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="Cells",y="Cell identities")+
geom_tile(aes(fill = value)) + scale_fill_gradientn(colours = c("black","gray","yellow","blue"),name="Probability\n")
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="Cells",y="Cell identities")+
geom_tile(aes(fill = value)) + scale_fill_gradientn(colours = c("gray","black","yellow","blue"),name="Probability\n")
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="Cells",y="Cell identities")+
geom_tile(aes(fill = value)) + scale_fill_gradientn(colours = c("black","blue","yellow","deeppink"),name="Probability\n")
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="Cells",y="Cell identities")+
geom_tile(aes(fill = value)) + scale_fill_gradientn(colours = c("blue","yellow","deeppink"),name="Probability\n")
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="Cells",y="Cell identities")+
geom_tile(aes(fill = value)) + scale_fill_gradientn(colours = c("azure","blue","yellow","deeppink"),name="Probability\n")
ids
ord.p <- probabilities[ids.ord,]
ids.ord <- order(ids)
ord.p <- probabilities[ids.ord,]
my_df <- data.frame(ord.p,check.names = F,check.rows = F)
my_df.melt <-  melt(cbind(x=1:nrow(my_df),my_df),id ="x")
head(my_df.melt)
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="Cells",y="Cell identities")+
geom_tile(aes(fill = value)) + scale_fill_gradientn(colours = c("azure","blue","yellow","deeppink"),name="Probability\n")
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="Cells",y="Cell identities")+
geom_tile(aes(fill = value)) + scale_fill_gradientn(colours = c("white","blue","yellow","deeppink"),name="Probability\n")
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="Cells",y="Cell identities")+
geom_tile(aes(fill = value)) + scale_fill_gradientn(colours = c("gray100","blue","yellow","deeppink"),name="Probability\n")
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="Cells",y="Cell identities")+
geom_tile(aes(fill = value)) + scale_fill_gradientn(colours = c("gray100","blue","yellow","deeppink"),
name="Probability\n")+
theme(axis.text.x=element_blank(),
axis.text.y = element_text(size=16),axis.title = element_text(size=16))
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="Cells",y="Cell identities")+
geom_tile(aes(fill = value)) + scale_fill_gradientn(colours = c("gray100","blue","yellow","deeppink"),
name="Probability\n")+
theme(axis.text.x=element_blank(),
axis.text.y = element_text(colour = "black",size=16),axis.title = element_text(size=16))
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="Cells",y="Cell identity")+
geom_tile(aes(fill = value)) + scale_fill_gradientn(colours = c("gray100","blue","yellow","deeppink"),
name="Probability\n")+
theme(axis.text.x=element_blank(),
axis.text.y = element_text(colour = "black",size=16),axis.title = element_text(size=16))
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="Cells",y="Cell identity")+
geom_tile(aes(fill = value)) + scale_fill_gradientn(colours = c("gray100","blue","yellow","deeppink"),
name="Probability\n")+
theme(axis.text.x=element_blank(),
axis.text.y = element_text(colour = "black",size=16),axis.title = element_text(size=16),
legend.text = element_text(size=14),legend.title = element_text(size = 16))
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="Cells",y="Cell identity")+
geom_tile(aes(fill = value)) + scale_fill_gradientn(colours = c("gray100","blue","yellow","deeppink"),
name="Probability\n")+
theme(axis.text.x=element_blank(),
axis.text.y = element_text(colour = "black",size=16),axis.title = element_text(size=16),
legend.text = element_text(size=14),legend.title = element_text(size = 14))
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="Cells",y="Cell identity")+
geom_tile(aes(fill = value)) + scale_fill_gradientn(colours = c("gray100","blue","yellow","deeppink"),
name="Probability\n")+
theme(axis.text.x=element_blank(),
axis.text.y = element_text(colour = "black",size=16),axis.title = element_text(size=16),
legend.text = element_text(size=12),legend.title = element_text(size = 12))
ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="Cells",y="Cell identity")+
geom_tile(aes(fill = value)) + scale_fill_gradientn(colours = c("gray100","blue","yellow","deeppink"),
name="Probability\n")+
theme(axis.text.x=element_blank(),
axis.text.y = element_text(colour = "black",size=16),axis.title = element_text(size=16),
legend.text = element_text(size=12),legend.title = element_text(size = 12))
gg <-  ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="Cells",y="Cell identity")+
geom_tile(aes(fill = value)) + scale_fill_gradientn(colours = c("gray100","blue","yellow","deeppink"),
name="Probability\n")+
theme(axis.text.x=element_blank(),
axis.text.y = element_text(colour = "black",size=16),axis.title = element_text(size=16),
legend.text = element_text(size=12),legend.title = element_text(size = 12))
gg
png(file="vignettes/identity_heatmaps.png",width = 22, height = 20, units = 'in', res = 600)
gg
dev.off()
png(file="vignettes/identity_heatmaps.png",width = 8, height = 8, units = 'in', res = 600)
gg
dev.off()
png(file="vignettes/identity_heatmaps.png",width = 6, height = 7, units = 'in', res = 600)
gg
dev.off()
png(file="vignettes/identity_heatmaps.png",width = 7, height = 7, units = 'in', res = 600)
gg
dev.off()
png(file="vignettes/identity_heatmaps.png",width = 7, height = 6, units = 'in', res = 600)
gg
dev.off()
load(file="~/Dropbox/HCA_benchmarking_sample/Revision/Integration/All_reads/Benchmarking_data/data.list_seurat.obj_all_datasets.RData")
ref <- data.list$Chromium
nnet2 <- ref$nnet2
marsseq <- data.list$`MARS-Seq`
mseq.clus <- marsseq$ident
table(mseq.clus,ids)
col=c("aquamarine","orange","green4","blueviolet","black","maroon","coral2","deepskyblue3","lightgray")
summary_barplot(class.fac = ids ,obs.fac = mseq.annotation)+scale_fill_manual(values = col)
summary_barplot(class.fac = ids ,obs.fac = mseq.clus)+scale_fill_manual(values = col)
smartseq2 <- data.list$`Smart-Seq2`
scaled <- ScaleData(smartseq2,features = unlist(gene_cl.ref))
scaled <- scaled@assays$RNA@scale.data
## Cell projection
out <- identity_map(scale.data = scaled,
model = mod,
gene_cl.ref = gene_cl.ref)
ids.ord <- order(out$ids)
ord.p <- out$fit.prob[ids.ord,]
my_df <- data.frame(ord.p,check.names = F,check.rows = F)
my_df.melt <-  melt(cbind(x=1:nrow(my_df),my_df),id ="x")
gg <-  ggplot(my_df.melt, aes(x=factor(x),y=variable,fill=value)) + labs(x="Cells",y="Cell identity")+
geom_tile(aes(fill = value)) + scale_fill_gradientn(colours = c("gray100","blue","yellow","deeppink"),
name="Probability\n")+
theme(axis.text.x=element_blank(),
axis.text.y = element_text(colour = "black",size=16),axis.title = element_text(size=16),
legend.text = element_text(size=12),legend.title = element_text(size = 12))
gg
png(file="vignettes/identity_heatmaps.png",width = 7, height = 6, units = 'in', res = 600)
gg
dev.off()
smseq.clus <- smartseq2$ident
col=c("aquamarine","orange","green4","blueviolet","black","maroon","coral2","deepskyblue3","lightgray")
summary_barplot(class.fac = ids ,obs.fac = smseq.clus)+scale_fill_manual(values = col)
summary_barplot(class.fac = out$ids ,obs.fac = smseq.clus)+scale_fill_manual(values = col)
png(file="vignettes/summary_barplots.png",width = 7, height = 6, units = 'in', res = 600)
summary_barplot(class.fac = out$ids ,obs.fac = smseq.clus)+scale_fill_manual(values = col)
dev.off()
## And the MARS-Seq as test
test.markers <- markers$`Smart-Seq2`
gene_cl.test <- cut_markers(levels(test.markers$cluster),markers = test.markers,ntop = 100)
matchSCore2(gene_cl.ref = gene_cl.ref,gene_cl.obs = gene_cl.test,ylab = "Chromium",xlab = "Smart-seq2")
## The matchSCore2 function computes the clustering comparison and produce the heatmap table with Jaccard Indexes for each group combination
png(file="vignettes/Cluster-sp_markers_comparison.png",width = 7, height = 6, units = 'in', res = 600)
matchSCore2(gene_cl.ref = gene_cl.ref,gene_cl.obs = gene_cl.test,ylab = "Chromium",xlab = "Smart-seq2")
dev.off()
matchSCore2(gene_cl.ref = gene_cl.ref,gene_cl.obs = gene_cl.test,ylab = "Chromium",xlab = "Smart-seq2")+
scale_fill_gradient(low = "white", high = "blue",name="Jaccard Index")
matchSCore2(gene_cl.ref = gene_cl.ref,gene_cl.obs = gene_cl.test,ylab = "Chromium",xlab = "Smart-seq2")+
scale_fill_gradient(low = "white", high = "blue")
matchSCore2(gene_cl.ref = gene_cl.ref,gene_cl.obs = gene_cl.test,ylab = "Chromium",xlab = "Smart-seq2")
png(file="vignettes/Cluster-sp_markers_comparison.png",width = 7, height = 6, units = 'in', res = 600)
matchSCore2(gene_cl.ref = gene_cl.ref,gene_cl.obs = gene_cl.test,ylab = "Chromium",xlab = "Smart-seq2")
dev.off()
matchSCore2(gene_cl.ref = gene_cl.ref,gene_cl.obs = gene_cl.test,ylab = "Chromium",xlab = "Smart-seq2")
